#creat with :PyCharm
#Author:Wilson
#Date:2018/5/3
#Time:14:40

# 插入排序(Insertion Sort)
# 插入排序(Insertion Sort)的基本思想是：
# 将列表分为2部分，左边为排序好的部分，右边为未排序的部分，
# 循环整个列表，每次将一个待排序的记录，按其关键字大小插入到前面已经排好序的子序列中的适当位置，
# 直到全部记录插入完成为止。

# 插入排序非常类似于整扑克牌。
# 在开始摸牌时，左手是空的，牌面朝下放在桌上。
# 接着，一次从桌上摸起一张牌，并将它插入到左手一把牌中的正确位置上。
# 为了找到这张牌的正确位置，要将它与手中已有的牌从右到左地进行比较。
# 无论什么时候，左手中的牌都是排好序的。
# 也许你没有意识到，但其实你的思考过程是这样的：
# 现在抓到一张7，把它和手里的牌从右到左依次比较，7比10小，应该再往左插，7比5大，好，就插这里。
# 为什么比较了10和5就可以确定7的位置？为什么不用再比较左边的4和2呢？
# 因为这里有一个重要的前提：手里的牌已经是排好序的。
# 现在我插了7之后，手里的牌仍然是排好序的，下次再抓到的牌还可以用这个方法插入。
# 编程对一个数组进行插入排序也是同样道理，
# 但和插入扑克牌有一点不同，不可能在两个相邻的存储单元之间再插入一个单元，
# 因此要将插入点之后的数据依次往后移动一个单元。

source = [92, 77, 67, 8, 6, 84, 55, 85, 43, 67]

for index in range(1, len(source)):
    current_val = source[index]  # 先记下来每次大循环走到的第几个元素的值
    position = index

    while position > 0 and source[position - 1] > current_val:  # 当前元素的左边的紧靠的元素比它大,要把左边的元素一个一个的往右移一位,给当前这个值插入到左边挪一个位置出来
        source[position] = source[position - 1]  # 把左边的一个元素往右移一位
        position -= 1  # 只一次左移只能把当前元素一个位置 ,还得继续左移只到此元素放到排序好的列表的适当位置 为止

    source[position] = current_val  # 已经找到了左边排序好的列表里不小于current_val的元素的位置,把current_val放在这里
    print(source)





